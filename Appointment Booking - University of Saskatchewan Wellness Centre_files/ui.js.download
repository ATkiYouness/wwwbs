//Define site's base directory. Used in AJAX requests
var baseSiteDirectory = ''; // If site is something.usask.ca

// If site is usask.ca/something
if (window.location.hostname == 'm.usask.ca' || window.location.hostname == 'mtest.usask.ca') {
    baseSiteDirectory = '/' + window.location.pathname.split('/')[1];   
}

//Define paths to news and events php files for AJAX requests. 
//Override this by redefining it after your call to ui.js in the <head> of your document.
var pathToNews = baseSiteDirectory + '/includes/mobile/news.php';
var pathToEvents = baseSiteDirectory + '/includes/mobile/events.php';
var pathToFeatures  = baseSiteDirectory + '/includes/mobile/features.php';
var pathToTwitter  = baseSiteDirectory + '/includes/mobile/twitter.php';

//Generic loading message used on custom AJAX requests
var loadingMsg = '<div class="loading-msg"><span class="icon loading spin"></span><p>Loading...</p></div>';

var globalNav = '';

function is_touch_device() { // Feature detection if need be
    try {  
        document.createEvent('TouchEvent');  
        return true;  
    } catch (e) {  
        return false;  
    }  
}

/* 
BASIC AJAX LOADER

el = container element
ajaxURL = URL for AJAX request
*/
function basicAjaxLoader(el) {
    var container = $(el);    
    var ajaxURL = container.attr('data-ajaxurl');
    container.html(loadingMsg); //Show loading message
    
    $.ajax({
          url: ajaxURL, 
          success: function(result){ 
                container.html(result);                 
                container.trigger('create');  //Apply JQM 'enhancements' to result                 
                }, 
          error: function(result){ container.html('<p class="alert">Could not load content.</p>'); container.hide(); }
      });
}


/* 
LOAD NEWS FEED

page = page to display the feed
el = container element within page
type = 'context', 'index', 'slider'
*/
function loadNews(page,el,type) {
    var container;
    var currentStory;
    var category = '';
    var displayToggler = '';
    
    //Set container for AJAX result
    if (page) {
        container = $(page).find(el);
        currentStory = $(page).find('article h1').text(); //If we're already viewing a story, get its title so we don't display it in the nav
    }
    else container = $(el);    
    
    container.html(loadingMsg); //Show loading message
    
    // Create the toggler HTML to switch between list/grid views for non-slider types
    if (type != 'slider') {
        displayToggler = '<div class="news-display-toggler" data-role="controlgroup" data-type="horizontal">';  
        displayToggler += '<a href="#" class="ui-btn-active" data-role="button" data-theme="a" onclick="toggleNewsDisplay(this,\'list\')"><span class="icon list">List</span></a>';
        displayToggler += '<a href="#" data-role="button" data-theme="a" onclick="toggleNewsDisplay(this,\'grid\')"><span class="icon grid">Grid</span></a>';
        displayToggler += '</div>';
    }
    
    // Only show stories of a specific category if need be
    var category = container.attr('data-category');
        
    // Set a lower number of items to display if feed isn't main content
    var num_items = '';
    if (container.parents('[data-role="content"]').length == 0) {
        num_items = 3;
    }
    $.ajax({
        url: pathToNews, 
        data: { type: type, cat: category, currentstory: currentStory, num_items: num_items }, 
        success: function(result){ 
            container.html(displayToggler + result); 
            container.trigger('create'); //Apply JQM 'enhancements' to result           
            }, 
        error: function(result){ container.html('<p class="alert">No stories found.</p>'); container.hide(); }
    });
}

function toggleNewsDisplay(e,c) {
    $('.news-display-toggler a').removeClass('ui-btn-active');
    $(e).addClass('ui-btn-active');
    if (c == 'grid') {
        $(e).parents('.news-index').addClass('grid');
        $(e).parents('.news-context').addClass('grid');
    }
    else {
        $(e).parents('.news-index').removeClass('grid');
        $(e).parents('.news-context').removeClass('grid');
    }   
}

/* 
LOAD EVENTS FEED

page = page to display the feed
el = container element within page
type = 'index', 'slider'
*/
function loadEvents(page,el,type) {
    var container;
    
    //Set container for AJAX result
    if (page) container = $(page).find(el);
    else container = $(el);

    container.html(loadingMsg); //Show loading message
    
    // Set a lower number of items to display if feed isn't main content
    var num_items = '';
    if (container.parents('[data-role="content"]').length == 0) {
        num_items = 3;
    }
    $.ajax({
          url: pathToEvents, 
          data: { type: type, num_items: num_items }, 
          success: function(result){ 
                container.html(result);                 
                container.trigger('create');  //Apply JQM 'enhancements' to result 
                container.find('.event-time').each(function(index, element) {
                        if ($(this).html() == '12:00&nbsp;am' || $(this).html() == '12:00 am') $(this).hide(); 
                    });                 
                }, 
          error: function(result){ container.html('<p class="alert">No events found.</p>'); container.hide(); }
      });
}

/* 
LOAD TWITTER FEED

page = page to display the feed
el = container element within page
twitterUsername = Twitter account name
*/
function loadTweets(page,el) {
    var container;
    //Set container for AJAX result
    if (page) container = $(page).find(el);
    else container = $(el);

    container.html(loadingMsg); //Show loading message    
    
    $.ajax({
          url: pathToTwitter, 
          data: { }, 
          success: function(result){ 
                container.html(result);                 
                container.trigger('create');  //Apply JQM 'enhancements' to results                 
                }, 
          error: function(result){ container.html('<p class="alert">No tweets found.</p>'); container.hide(); }
      });
}


/* 
LOAD MORE FEED ITEMS - Allows for continous display of feed items
e = element that was clicked to trigger function
el = container element for feed items
ajaxURL = URL for AJAX request
*/
function loadMore(e,el,ajaxURL) {
    var container = $(e).parents(el); // Set container for AJAX result
    var btn = $(e).parent('li'); // Get button parent
    btn.html(loadingMsg); // Replace button with loading message
    btn.addClass('disabled'); // Add class for CSS (if necessary)
    $.ajax({
          url:ajaxURL, 
          success: function(result){ 
            btn.remove(); // remove button to make room for new feed items
            container.append(result); // append returned feed items to container
            container.trigger('create'); //Apply JQM 'enhancements' to result 
            container.find('.event-time').each(function(index, element) {
                        if ($(this).html() == '12:00&nbsp;am' || $(this).html() == '12:00 am') $(this).hide(); 
                    });
            }, 
          error: function(result){ container.append('<p class="alert">No more results found.</p>'); }
      });
}

/* 
LOAD SLIDER CONTENT TO CREATE 'FLEXSLIDER' OBJECT

page = page to display the slider
el = container element within page
ajaxURL = URL for AJAX request
*/
function loadSliderContent(page,el,ajaxURL) {
    var container;
    
    //Set container for AJAX result
    if (page) container = $(page).find(el);
    else container = $(el);
    
    container.html(loadingMsg); //Show loading message
    
    $.ajax({
          url:ajaxURL,
          data: { type: 'slider'},
          success: function(result){ 
            container.html(result);
            if (container.find('.feature-title:empty').length == container.find('.feature-title').length) {
                container.addClass('no-captions'); 
            }
            container.find('.event-time').each(function(index, element) {
                        if ($(this).html() == '12:00&nbsp;am' || $(this).html() == '12:00 am') $(this).hide(); 
                    });
            createSlider(container); //Create new 'FLEXSLIDER' with result
            container.trigger('create'); //Apply JQM 'enhancements' to result 
            }, 
          error: function(result){ container.html('<p class="alert">No results found.</p>'); container.hide(); }
      });

}

/* 
CREATE A NEW 'FLEXSLIDER' OBJECT 
(see plugin in plugins.js or http://flex.madebymufffin.com)

container = element that contains 'flexslider' markup
rand = random start point, true or false
*/
function createSlider(container,rand) {
    if (rand == null) rand = false;
    if (container.hasClass('features-slider')) rand = true;
    
       container.flexslider({
                    animation: "slide",              //String: Select your animation type, "fade" or "slide"
                    slideDirection: "horizontal",   //String: Select the sliding direction, "horizontal" or "vertical"
                    slideshow: false,                //Boolean: Animate slider automatically
                    slideshowSpeed: 7000,           //Integer: Set the speed of the slideshow cycling, in milliseconds
                    animationDuration: 400,         //Integer: Set the speed of animations, in milliseconds
                    directionNav: true,             //Boolean: Create navigation for previous/next navigation? (true/false)
                    controlNav: true,               //Boolean: Create navigation for paging control of each clide? Note: Leave true for manualControls usage
                    keyboardNav: true,              //Boolean: Allow slider navigating via keyboard left/right keys
                    mousewheel: false,              //Boolean: Allow slider navigating via mousewheel
                    prevText: "Prev",           //String: Set the text for the "previous" directionNav item
                    nextText: "Next",               //String: Set the text for the "next" directionNav item
                    pausePlay: false,               //Boolean: Create pause/play dynamic element
                    pauseText: 'Pause',             //String: Set the text for the "pause" pausePlay item
                    playText: 'Play',               //String: Set the text for the "play" pausePlay item
                    randomize: rand,               //Boolean: Randomize slide order
                    slideToStart: 0,                //Integer: The slide that the slider should start on. Array notation (0 = first slide)
                    animationLoop: false,            //Boolean: Should the animation loop? If false, directionNav will received "disable" classes at either end
                    pauseOnAction: true,            //Boolean: Pause the slideshow when interacting with control elements, highly recommended.
                    pauseOnHover: false,            //Boolean: Pause the slideshow when hovering over slider, then resume when no longer hovering
                    controlsContainer: "",          //Selector: Declare which container the navigation elements should be appended too. Default container is the flexSlider element. Example use would be ".flexslider-container", "#container", etc. If the given element is not found, the default action will be taken.
                    manualControls: "",             //Selector: Declare custom control navigation. Example would be ".flex-control-nav li" or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
                    start: function(slider){
                        $('.image-gallery-thumbs img').each(function(index, element) {
                            var start = index;
                            $(this).click(function(){ 
                                $('.image-gallery').show(); 
                                $.mobile.silentScroll(0); 
                                if (slider.currentSlide != start) {
                                    slider.flexAnimate(start); 
                                }
                            });
                        });
                        },            //Callback: function(slider) - Fires when the slider loads the first slide
                    before: function(){},           //Callback: function(slider) - Fires asynchronously with each slider animation
                    after: function(){},            //Callback: function(slider) - Fires after each slider animation completes
                    end: function(){}               //Callback: function(slider) - Fires when the slider reaches the last slide (asynchronous)             
            });
        

}

function launchImageGallery(e,start) {
    
}
/* 
News and Events tab functionality
e = element (tab) that was clicked to trigger functions
c = container (tab content) to display
*/
function toggleNewsEvents(e,c) {
    $('.news-events .events-index').hide();
    $('.news-events .news-index').hide();
    $('.news-events .'+c).show();
    $('.news-events-toggler a').removeClass('ui-btn-active');
    $(e).addClass('ui-btn-active');
}

/* 
Header and global nav live outside the data-role="page" div,
so we need to adjust page padding to make room for them 
*/
function adjustForHeaderSize() {
    var headerHeight = $('header').innerHeight() + $('header').offset().top;
    $('.standard-page').css('padding-top', headerHeight+'px');
}

/* Switch to desktop site */
function switchPlatform(platform) {
    var url = 'http://' + window.location.host + window.location.pathname;  
    if (window.location.host == 'mtest.usask.ca') { // Test site
        url = url.replace('mtest.usask','wwwtest.usask');
    }
    else if (window.location.host == 'm.usask.ca') { // Live site
        url = url.replace('m.usask','www.usask');
    }
    else { // aliased sites
        url = url.replace('http://m.','http://');
        // Handle test environment as well
        url = url.replace('http://mtest.','http://');
    }
    window.location = url + '?mredir=0';
}

/* Get the title and url of the in-view page and add it to Twitter/Facebook share links */
function createShareLinks(page) {
    var url = window.location.href;
    var title = $(page).find('article h1').text();
    $(page).find('.share .twitter').attr('href', 'https://twitter.com/intent/tweet?url='+encodeURIComponent(url)+'&text='+title+'&via=usask');
    $(page).find('.share .facebook').attr('href', 'http://www.facebook.com/sharer.php?u='+encodeURIComponent(url)+'&t='+title);
    $(page).find('.share .google').attr('href', 'https://m.google.com/app/plus/x/?v=compose&content='+title+': '+encodeURIComponent(url));
}

/* 
Expand a specific collapsible based on a URL parameter (eg. ?tab=Collapsible Heading Label)
*/
function expandCollapsibleBlock(page) {
    var urlLabel = window.location.href.split('?tab=')[1];
    urlLabel = decodeURIComponent(urlLabel);
    $(page).find('.ui-collapsible-heading .ui-btn-text').each(function(index, element) {
        var tabLabel = $(this).text().split(' click to ')[0];
        if (tabLabel == urlLabel) {
            var container = $(this).parents('.ui-collapsible');
            // remove all the '-collapsed' classes and swap the icon
            container.removeClass('ui-collapsible-collapsed');
            container.find('.ui-collapsible-content').removeClass('ui-collapsible-content-collapsed');
            container.find('.ui-collapsible-heading').removeClass('ui-collapsible-heading-collapsed');
            container.find('.ui-icon-plus').removeClass('ui-icon-plus').addClass('ui-icon-minus');
        }
    });
}

/* Toggle the global nav menu on non-webkit browsers */
function toggleMenu() {
    $('.global-nav .nav-wrapper').toggle();
    $('.global-nav').toggleClass('opened');
}

/* Fix links to other usask.ca sites so they don't load via AJAX */
function fixExternalLinks(container) {
    var linkPath;
    $(container).find('a').each(function(i) {
        linkPath = $(this).attr('href');
        if (linkPath != null && linkPath.indexOf(window.location.hostname) != -1 && linkPath.indexOf(baseSiteDirectory) == -1) {
                $(this).attr('data-ajax','false');
            }
    });
}

function hideMenuOnTouch(event) {
    if ($('body').is('.active-menu')) {
        event.preventDefault();
        event.stopPropagation();
        $('.global-nav .toggler').removeClass('is-active');      
        $('body').removeClass('active-menu');
    }
}

/*
$(document).ready() is only used to create the global nav functionality and to attach an event listener to the window.
(The global nav menu lives outside the data-role="page" area so it isn't affected by new page initiations)

We use $(document).ready() for these because they only need to be called once -- when the initial document is loaded or fully refreshed.
*/
$(document).ready(function() {
    $('.site-map [data-theme]').attr('data-theme','e');
    $('.contact[data-theme]').attr('data-theme','a');
    $('.global-nav').trigger('create'); // Apply JQM enhancements to global nav
    $('header .search-global').trigger('create');
   /* if ($.browser.webkit && is_touch_device() && navigator.userAgent.match(/BlackBerry/i) == null) { // Create slideInMenu object (see plugin in plugins.js) if browser is webkit/touch
        //globalNav = new slideInMenu('global-nav'); 
    }
    else { // Collapse menu for other browsers and apply toggle functionality
        //$('.global-nav .nav-wrapper').hide();
        //$('.global-nav .toggler').bind('click', toggleMenu);
        //$('.global-nav .nav-wrapper a').bind('click', function() { $('.global-nav .nav-wrapper').hide(); $('.global-nav').removeClass('opened'); });  
    }*/
     $('.global-nav .toggler').text('');   
    if (is_touch_device()) {
        $('header').bind('touchstart',hideMenuOnTouch);
        $('.global-nav .toggler').bind('touchstart',function(event){
            event.preventDefault();
            window.scrollTo(0,0);
            $(this).toggleClass('is-active');
            $('body').toggleClass('active-menu');  
        });
    }
    else {
         $('.global-nav .toggler').click(function(event){ 
            event.preventDefault();
            window.scrollTo(0,0);
            $(this).toggleClass('is-active');
            $('body').toggleClass('active-menu');                   
        });
    }
    $('.global-nav .site-map a, .global-nav .contact').click(function() { $('body').removeClass('active-menu'); });
    
    
    if (navigator.userAgent.match(/BlackBerry/i) != null) { // Add a bottom border to the header if Blackberry
        $('header').css('border-bottom','1px solid #eee'); 
    }
    $('span.icon').attr('aria-hidden',true); // Hide icons from screen readers
    $(window).resize(adjustForHeaderSize);    
});

/* 
Configure the JQM defaults
*/
$(document).bind("mobileinit", function(){
  $.extend(  $.mobile , {
    loadingMessage: false
  });
});


/* 
Trigger certain functions before JQM modifies a page's DOM
*/
$('.standard-page').live('pagebeforecreate', function(event) {  
        $(this).find('input[type=submit]').attr('data-theme','c');    
        $(this).find('input[type=button]').attr('data-theme','c');   
});

/* 
Trigger certain functions upon page initiation. 
This is 'basically' the JQM equivalent of $(document).ready().
JQM loads new pages via AJAX, so there are no page refreshes to grab new <head> content.
*/
$('.standard-page').live('pageinit', function(event) {      
    adjustForHeaderSize();
    fixExternalLinks(this);
    $(this).find('span.icon').attr('aria-hidden',true); // Hide icons from screen readers
    if ($(this).find('.context-nav li').length < 2) { $(this).find('.context-nav').hide(); }
    if ($(this).find('.news-story-meta').length) { $(this).find('.news-story .byline').hide(); }
    /*At any given time there can be multiple 'pages' in the DOM.
      We want to target elements specifically within the initiated page using $(this).find() 
      so we don't grab elements in hidden pages and re-trigger functions needlessly.
    */
    if ($(this).find('.news-slider').length) { // load news slider, if exists
        loadSliderContent(this,'.news-slider', pathToNews); 
    }
    if ($(this).find('.events-slider').length) { // load events slider, if exists
        loadSliderContent(this,'.events-slider', pathToEvents); 
    }
    if ($(this).find('.features-slider').length) { // load features slider, if exists
        loadSliderContent(this,'.features-slider', pathToFeatures);
    }
    if ($(this).find('.news-context').length) { // load news context nav, if exists
        loadNews(this,'.news-context','context');
    }
    if ($(this).find('.news-index').length) { // load news index feed, if exists
        loadNews(this,'.news-index','index');
    }
    if ($(this).find('.events-index').length) { // load events index feed, if exists
        loadEvents(this,'.events-index','index');
    }
    if ($(this).find('.twitter-feed').length) { // load events index feed, if exists
        loadTweets(this,'.twitter-feed');
    }
    if ($(this).find('.image-gallery').length) { // create image gallery, if exists
        createSlider($(this).find('.image-gallery'));
    }
    if ($(this).find('[data-ajaxurl]').length) { // find elements to load content via ajax url defined in data-ajaxurl attribute
        basicAjaxLoader($(this).find('[data-ajaxurl]'));
    }  
    if (is_touch_device()) {
        $(this).bind('touchstart',hideMenuOnTouch); 
    }
});


/* 
Trigger certain functions upon page before show.
*/
$('.standard-page').live('pagebeforeshow',function() {
    // ensure global nav is collapsed before we transition to a new page
    //if (globalNav != '') {
    //    globalNav.close(); 
    //}
    //$('body').removeClass('active-menu');
    /* The script below is used fix internal hash links, which don't work normally in JQM. */        
     $(this).find('a[href^="#"]').each(function() {
        if ($(this).parents('.ui-page').find('[name="'+$(this).attr('href').substr(1)+'"]').length == 1) {
            $(this).unbind('click').click(function(e) {
                e.stopPropagation();
                e.preventDefault();
                var $target = $(this).parents('.ui-page').find('[name="'+$(this).attr('href').substr(1)+'"]').eq(0);
                $.mobile.silentScroll($target.offset().top);
                return;
            });
        }
    }); 
});

/* 
Trigger certain functions upon page show.
*/
$('.standard-page').live('pageshow', function(event) {
    if ($(this).find('.share').length) { // create share links if they're on the page
        createShareLinks(this); 
    }
    if ($(this).find('[data-role="collapsible-set"]').length) { // expand a specific collapsible block based on url parameter
       expandCollapsibleBlock(this); 
    }
});


// Google Analytics tracking
$('[data-role=page]').live('pageshow', function (event, ui) { 
    try { 
         
        if (typeof _gaq == "undefined" || !(_gaq instanceof Array)) 
        { 
            
if ($.mobile.activePage.attr("data-url")) {
_gaq.push(['_trackPageview', $.mobile.activePage.attr("data-url")]);
_gaq.push(['b._trackPageview', $.mobile.activePage.attr("data-url")]);
 
} else {
_gaq.push(['_trackPageview']);
_gaq.push(['b._trackPageview']);
} 
        } 
         
    } catch(err) {} 
}); 


